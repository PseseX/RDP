name: Windows RDP with RustDesk

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Enable RDP
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-Service -Name TermService -StartupType Automatic
          Start-Service TermService

      - name: Install RustDesk via Chocolatey
        shell: pwsh
        run: |
          choco feature enable -n=allowGlobalConfirmation
          choco install rustdesk
          # تأكد من تشغيل الخدمة
          Start-Service -Name "RustDesk Service" -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 8

      - name: Ensure RustDesk generated ID/Password
        shell: pwsh
        run: |
          # لو ما اشتغلت الخدمة، شغّل التطبيق مرّة ليتولّد الـID/Pass
          $exePaths = @(
            "$env:ProgramFiles\RustDesk\rustdesk.exe",
            "$env:ProgramFiles(x86)\RustDesk\rustdesk.exe"
          )
          $exe = $exePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exe) { throw "RustDesk executable not found." }
          # شغّل/أوقف لتوليد ملفات الإعداد
          Start-Process $exe
          Start-Sleep -Seconds 10
          Get-Process rustdesk -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 3

      - name: Read RustDesk ID and Password
        id: rust
        shell: pwsh
        run: |
          $idCandidates = @(
            "$env:PROGRAMDATA\RustDesk\id",
            "$env:PROGRAMDATA\RustDesk\config\id_ed25519.pub",
            "$env:APPDATA\RustDesk\id",
            "$env:APPDATA\RustDesk\config\id_ed25519.pub"
          )
          $pwdCandidates = @(
            "$env:PROGRAMDATA\RustDesk\config\password.txt",
            "$env:APPDATA\RustDesk\config\password.txt"
          )

          $id  = $null
          foreach ($p in $idCandidates) {
            if (Test-Path $p) { $id = (Get-Content $p -Raw).Trim(); break }
          }
          if (-not $id) { Write-Warning "RustDesk ID file not found."; }

          $pwd = $null
          foreach ($p in $pwdCandidates) {
            if (Test-Path $p) { $pwd = (Get-Content $p -Raw).Trim(); break }
          }
          if (-not $pwd) { Write-Warning "RustDesk password file not found."; }

          if ($id) { "RUSTDESK_ID=$id"   | Out-File -FilePath $env:GITHUB_ENV -Append }
          if ($pwd){ "RUSTDESK_PASS=$pwd"| Out-File -FilePath $env:GITHUB_ENV -Append }

          Write-Host "RustDesk ID: $id"
          Write-Host "RustDesk Password: $pwd"

      - name: Send info to Telegram
        if: always()
        shell: pwsh
        run: |
          $id  = $env:RUSTDESK_ID
          $pwd = $env:RUSTDESK_PASS
          $msg = "✅ Windows Cloud Ready (RustDesk)`n`nRustDesk ID: $id`nRustDesk Password: $pwd`n`nUser (RDP): runneradmin`nPass (RDP): P@ssw0rd123!`n`nNote: Session lasts 6h."
          $uri = "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          curl -s -X POST $uri -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" --data-urlencode "text=$msg"

      - name: Keep alive 6h
        shell: pwsh
        run: Start-Sleep -Seconds 21600
